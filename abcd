### **Capstone Project Outline: SmartLiving - A Real-Time Home Automation System Using IoT Devices**

---

### **1. Introduction of Your Proposed System**  
- **Overview**:  
  The proposed system, **SmartLiving**, is a real-time home automation solution designed to enhance convenience, energy efficiency, and security for households. By leveraging Internet of Things (IoT) technology, the system integrates various smart devices and sensors to provide users with centralized control over their home appliances and environmental parameters.  
- **Relevance**:  
  In both urban and rural settings, energy consumption, manual controls, and limited monitoring capabilities remain significant challenges. SmartLiving addresses these issues by offering an affordable, scalable, and user-friendly smart home system tailored to modern living needs.  
- **Key Features**:  
  - Real-time monitoring and control of home appliances via a mobile app built using **React Native**.  
  - Energy-saving features through automated lighting and power usage monitoring using **ACS712**.  
  - Enhanced home security with IoT-enabled motion detectors.  
  - Environmental monitoring using **DHT11** for temperature and humidity.  
  - Control of IR-based appliances (e.g., TVs, air conditioners) using an **IR Blaster**.  
  - Communication facilitated through **HiveMQ MQTT Broker** for real-time data exchange between devices and the mobile app.  

---

### **2. Statement of the Problem**  
- **General Problem**:  
  Many households lack access to modern home automation systems that can improve convenience, reduce energy consumption, and enhance security. Traditional homes often rely on manual controls, which are inefficient and prone to human error.  
- **Specific Problems**:  
  1. High energy consumption due to inefficient use of appliances and lighting.  
  2. Limited security measures, making homes vulnerable to theft and unauthorized entry.  
  3. Lack of real-time monitoring and remote access to home systems, especially for homeowners who are away from their properties.  
  4. Difficulty in adopting smart home technologies due to high costs and technical complexity.  
  5. Inability to monitor power usage and control IR-based appliances remotely.  

---

### **3. Objectives of the Study**  

#### **General Objective**:  
To design and implement a cost-effective, real-time home automation system using IoT devices that enhances convenience, energy efficiency, and security for households.

#### **Specific Objectives**:  
1. To develop a system that allows real-time monitoring and control of home appliances (e.g., lights, IR-based appliances) through a mobile app built using **React Native**.  
2. To integrate energy-saving features such as automated lighting and power usage monitoring using **ACS712** to reduce electricity consumption.  
3. To enhance home security by implementing IoT-enabled motion detectors with real-time alerts.  
4. To monitor environmental conditions using **DHT11** for temperature and humidity.  
5. To enable remote control of IR-based appliances (e.g., TVs, air conditioners) using an **IR Blaster**.  
6. To facilitate seamless communication between devices and the mobile app using **HiveMQ MQTT Broker**.  
7. To ensure scalability and affordability, making the system accessible to a wide range of households.  

---

### **4. Scope & Limitation**  

#### **Scope**:  
- The system will focus on automating essential home functions such as lighting, power usage monitoring, environmental monitoring, and basic security features.  
- It will be designed for single-family homes and small apartments, with potential scalability to multi-unit buildings.  
- The project will include hardware (sensors, actuators, microcontrollers) and software components (mobile app using React Native and HiveMQ MQTT Broker).  
- The system will support remote access via a mobile app and provide real-time alerts for security, lighting, and power usage.  

#### **Limitations**:  
- The system does not include advanced features like machine learning or AI-driven predictive maintenance due to resource constraints.  
- Smart plugs and door/window sensors are excluded to keep costs low and simplify implementation.  
- The initial cost of IoT devices may still limit adoption in low-income households, though efforts will be made to keep costs low.  
- The systemâ€™s performance may be affected by unstable internet connectivity, particularly in areas with limited access to reliable networks.  

---

### **5. Structural Design of Your Proposed System**  

#### **Hardware Components**:  
1. **Microcontroller**:  
   - **ESP32** (Cost: ~$15 per unit): Serves as the central hub for controlling IoT devices.  

2. **Sensors**:  
   - **Motion Sensors** (Cost: ~$5 each): Detect movement for security and lighting automation.  
   - **DHT11 Temperature and Humidity Sensor** (Cost: ~$2 each): Monitor indoor climate for environmental awareness.  
   - **ACS712 Current Sensor** (Cost: ~$3 each): Monitor real-time power usage of connected appliances.  

3. **Actuators**:  
   - **Relays** (Cost: ~$2 each): Control high-power devices like lights.  
   - **IR Blaster** (Cost: ~$5): Enable remote control of IR-based appliances (e.g., TVs, air conditioners).  

#### **Software Components**:  
1. **Mobile App**:  
   - **React Native**: Used to build a cross-platform mobile app for Android and iOS, enabling users to monitor and control their home devices remotely.  
   - Features include real-time device control, notifications, power usage visualization, and settings customization.  

2. **Communication Protocol**:  
   - **HiveMQ MQTT Broker**: Facilitates real-time communication between IoT devices and the mobile app. MQTT is lightweight and ideal for IoT applications, ensuring efficient data transmission even with limited bandwidth.  

#### **Estimated Cost of Devices**:  
| **Component**               | **Quantity** | **Unit Cost** | **Total Cost** |  
|-----------------------------|--------------|---------------|----------------|  
| ESP32 Microcontroller       | 1            | $15           | $15            |  
| Motion Sensors              | 3            | $5            | $15            |  
| DHT11 Sensor                | 1            | $2            | $2             |  
| ACS712 Current Sensor       | 1            | $3            | $3             |  
| Relays                      | 3            | $2            | $6             |  
| IR Blaster                  | 1            | $5            | $5             |  
| **Total Estimated Cost**    |              |               | **$46**        |  

---

### **6. System Workflow**  
1. **Data Collection**:  
   - Sensors (motion, DHT11, ACS712) collect real-time data from the environment and appliances.  
   - The ESP32 microcontroller processes this data and sends it to the **HiveMQ MQTT Broker**.  

2. **Data Transmission**:  
   - The MQTT protocol ensures efficient and reliable communication between the microcontroller and the mobile app.  

3. **User Interaction**:  
   - Users interact with the system through the **React Native mobile app**, which displays real-time data (e.g., power usage, temperature, humidity) and allows control of connected devices (e.g., turning lights on/off, controlling IR-based appliances).  
   - Notifications are sent to the app for events like motion detection or abnormal power usage.  

4. **Device Control**:  
   - Commands from the mobile app are sent back to the ESP32 via the MQTT broker, which triggers actuators (e.g., relays, IR blaster) to control appliances.  

2. **Sensors**:  
   - **Motion Sensors** (Cost: ~$5 each): Detect movement for security and lighting automation.  
   - **DHT11 Temperature and Humidity Sensor** (Cost: ~$2 each): Monitor indoor climate for environmental awareness.  
   - **ACS712 Current Sensor** (Cost: ~$3 each): Monitor real-time power usage of connected appliances.  

3. **Actuators**:  
   - **Relays** (Cost: ~$2 each): Control high-power devices like lights.  
   - **IR Blaster** (Cost: ~$5): Enable remote control of IR-based appliances (e.g., TVs, air conditioners).  

#### **Software Components**:  
1. **Mobile App**:  
   - **React Native**: Used to build a cross-platform mobile app for Android and iOS, enabling users to monitor and control their home devices remotely.  
   - Features include real-time device control, notifications, power usage visualization, and settings customization.  

2. **Communication Protocol**:  
   - **HiveMQ MQTT Broker**: Facilitates real-time communication between IoT devices and the mobile app. MQTT is lightweight and ideal for IoT applications, ensuring efficient data transmission even with limited bandwidth.  

#### **Estimated Cost of Devices**:  
| **Component**               | **Quantity** | **Unit Cost** | **Total Cost** |  
|-----------------------------|--------------|---------------|----------------|  
| ESP32 Microcontroller       | 1            | $15           | $15            |  
| Motion Sensors              | 3            | $5            | $15            |  
| DHT11 Sensor                | 1            | $2            | $2             |  
| ACS712 Current Sensor       | 1            | $3            | $3             |  
| Relays                      | 3            | $2            | $6             |  
| IR Blaster                  | 1            | $5            | $5             |  
| **Total Estimated Cost**    |              |               | **$46**        |  

---

### **6. System Workflow**  
1. **Data Collection**:  
   - Sensors (motion, DHT11, ACS712) collect real-time data from the environment and appliances.  
   - The ESP32 microcontroller processes this data and sends it to the **HiveMQ MQTT Broker**.  

2. **Data Transmission**:  
   - The MQTT protocol ensures efficient and reliable communication between the microcontroller and the mobile app.  

3. **User Interaction**:  
   - Users interact with the system through the **React Native mobile app**, which displays real-time data (e.g., power usage, temperature, humidity) and allows control of connected devices (e.g., turning lights on/off, controlling IR-based appliances).  
   - Notifications are sent to the app for events like motion detection or abnormal power usage.  

4. **Device Control**:  
   - Commands from the mobile app are sent back to the ESP32 via the MQTT broker, which triggers actuators (e.g., relays, IR blaster) to control appliances.  
